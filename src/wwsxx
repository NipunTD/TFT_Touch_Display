#include <Arduino.h>
#include <Arduino_GFX_Library.h>
#include <lvgl.h>
#include <HardwareSerial.h>
#include <Touch_GT911.h>
#include "touch.h"
#define MY_RED LV_COLOR_MAKE(255, 0, 0)  // Define red color
#define MY_BLUE LV_COLOR_MAKE(0, 0, 255) // Define blue color

#define RX_PIN 44
#define TX_PIN 43

#define LV_COLOR_WIHTE LV_COLOR_MAKE(0xff, 0xff, 0xff)
#define LV_COLOR_BLACK LV_COLOR_MAKE(0x00, 0x00, 0x00)
#define MY_GREEN LV_COLOR_MAKE(0x00, 0xff, 0x00)
#define LV_DISP_DEF_REFR_PERIOD 20

#define BUFFER_SIZE 15000 // Size of the array to store received data


Arduino_ESP32RGBPanel *bus = new Arduino_ESP32RGBPanel(
    39 /* CS */, 48 /* SCK */, 47 /* SDA */,
    18 /* DE */, 17 /* VSYNC */, 16 /* HSYNC */, 21 /* PCLK */,
    11 /* R0 */, 12 /* R1 */, 13 /* R2 */, 14 /* R3 */, 0 /* R4 */,
    8 /* G0 */, 20 /* G1 */, 3 /* G2 */, 46 /* G3 */, 9 /* G4 */, 10 /* G5 */,
    4 /* B0 */, 5 /* B1 */, 6 /* B2 */, 7 /* B3 */, 15 /* B4 */
);
Arduino_ST7701_RGBPanel *gfx = new Arduino_ST7701_RGBPanel(
    bus, GFX_NOT_DEFINED /* RST */, 0 /* rotation */,
    true /* IPS */, 480 /* width */, 480 /* height */,
    st7701_type1_init_operations, sizeof(st7701_type1_init_operations), true /* BGR */,
    10 /* hsync_front_porch */, 8 /* hsync_pulse_width */, 50 /* hsync_back_porch */,
    10 /* vsync_front_porch */, 8 /* vsync_pulse_width */, 20 /* vsync_back_porch */);

#define GFX_BL 38
/* Change to your screen resolution */
static lv_disp_draw_buf_t draw_buf;
static lv_color_t *disp_draw_buf;
static lv_color_t *disp_draw_buf1;
static lv_disp_drv_t disp_drv;
static lv_obj_t *tabview;
static lv_obj_t *tab1;
static lv_obj_t *tab2;
static int counter = 1; // Counter for unique text
static bool serial_display_enabled = false;

TaskHandle_t serialTaskHandle = NULL;

// Buffer for storing received data
uint8_t dataBuffer[BUFFER_SIZE];
size_t dataLength = 0;

// Global flag to control the scroll behavior
static bool scroll_enabled = true;

// Event callback for the ESD toggle switch
void esd_switch_event_cb(lv_event_t *e)
{
    lv_obj_t *sw = lv_event_get_target(e); // Get the switch object
    if (lv_obj_has_state(sw, LV_STATE_CHECKED)) {
        scroll_enabled = false;  // Disable scrolling when switch is ON
    } else {
        scroll_enabled = true;   // Enable scrolling when switch is OFF
    }
}

// Event callback for the Clear button
void clear_button_event_cb(lv_event_t *e)
{
    lv_obj_t *btn = lv_event_get_target(e); // Get the button object
    lv_obj_t *scrollable_area = (lv_obj_t *)lv_event_get_user_data(e); // Get the scrollable area

    if (scrollable_area != NULL) {
        lv_obj_clean(scrollable_area); // Clear the content of the scrollable area
    }

    // Clear the dataBuffer
    memset(dataBuffer, 0, sizeof(dataBuffer));
    dataLength = 0;

    // Reset the counter
    counter = 1;

    // Clear the buf (if declared globally or locally in the function that uses it)
    char buf[4096] = {0}; // Reset the buffer by setting all elements to 0
}



void serial_button_event_cb(lv_event_t *e)
{
    lv_obj_t *scrollable_area = (lv_obj_t *)lv_event_get_user_data(e); // Get the scrollable area
    
    char buf[4096]; // Buffer for formatted text

    if (dataLength > 0) {
        // Format the data from the buffer
        String serial_data = "";
        for (size_t i = 0; i < dataLength; i++) {
            serial_data += String((char)dataBuffer[i]); // Convert byte to char and append
        }
        snprintf(buf, sizeof(buf), "%s", serial_data.c_str()); // Format the data
        
        
    } else {
        snprintf(buf, sizeof(buf), "%d. No data available", counter++); // Fallback message
    }
    
    lv_obj_t *new_label = lv_label_create(scrollable_area);
    lv_label_set_text(new_label, buf);

    // Optionally scroll to the new label
    if (scroll_enabled) {
        lv_obj_scroll_to_view(new_label, LV_ANIM_ON);
    }

    // Limit the content to the last 30 rows
    if (lv_obj_get_child_cnt(scrollable_area) > 100) {
        lv_obj_del(lv_obj_get_child(scrollable_area, 0)); // Remove the oldest label
    }

    // Clear the buffer after displaying (optional)
    dataLength = 0;
}


void serial_data() {
    while (Serial.available()) {
        char incomingByte = Serial.read();     // Read the incoming byte

        if (dataLength < BUFFER_SIZE - 1) {    // Leave space for a comma
            if (incomingByte == '\n') {        // Check for end of data (e.g., newline)
                dataBuffer[dataLength] = ' ';  // Add a comma at the end
                dataLength++;
                dataBuffer[dataLength] = '\0'; // Null-terminate the string
                break;                         // Exit the loop
            } else {
                dataBuffer[dataLength] = incomingByte; // Store the byte in the buffer
                dataLength++;
            }
        } else {
            Serial.println("Buffer overflow! Data truncated.");
            break;
        }
    }
}

void baud_rate_dropdown_event_cb(lv_event_t *e)
{
    lv_obj_t *dropdown = lv_event_get_target(e); // Get the dropdown object
    int selected = lv_dropdown_get_selected(dropdown); // Get the selected index

    // Update the Serial baud rate based on selection
    if (selected == 0) {
        Serial.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
        
    } else if (selected == 1) {
        Serial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
    
    }
}

void TabSwipe()
{
    tabview = lv_tabview_create(lv_scr_act(), LV_DIR_LEFT, NULL); // Create a tab view with tabs on the left side

    // Add tabs
    lv_obj_t *tab1 = lv_tabview_add_tab(tabview, "Tab 1");

    // Create a style for the scrollable area
    static lv_style_t style_scrollable_area;
    lv_style_init(&style_scrollable_area);
    lv_style_set_bg_color(&style_scrollable_area, lv_color_black());
    lv_style_set_text_color(&style_scrollable_area, lv_color_white());
    lv_style_set_radius(&style_scrollable_area, 15); // Set corner radius to 15
    lv_style_set_clip_corner(&style_scrollable_area, true); // Enable clipping to round the corners


    // Create a scrollable container (scroll area)
    lv_obj_t *scrollable_area = lv_obj_create(tab1);
    lv_obj_set_size(scrollable_area, lv_pct(100), lv_pct(85));  // Adjust size
    lv_obj_align(scrollable_area, LV_ALIGN_TOP_MID, 0, 70);    // Below "E GRAVITY SOLUTIONS"
    lv_obj_set_scrollbar_mode(scrollable_area, LV_SCROLLBAR_MODE_AUTO); // Show scrollbar as needed
    lv_obj_set_scroll_dir(scrollable_area, LV_DIR_VER);  // Vertical scrolling
    lv_obj_set_flex_flow(scrollable_area, LV_FLEX_FLOW_COLUMN); // Stack elements vertically
    lv_obj_add_style(scrollable_area, &style_scrollable_area, 0); // Apply style to scrollable area


    // Create the "Clear" button outside the scrollable area
    lv_obj_t *clear_btn = lv_btn_create(tab1); // Create a button
    lv_obj_set_size(clear_btn, 100, 50);        // Set button size
    lv_obj_align(clear_btn, LV_ALIGN_TOP_LEFT, 120, 10); // Align at the top-left corner
    lv_obj_add_event_cb(clear_btn, clear_button_event_cb, LV_EVENT_CLICKED, scrollable_area); // Attach event callback

    lv_obj_t *clear_label = lv_label_create(clear_btn); // Create label for the button
    lv_label_set_text(clear_label, "Clear");            // Set button label text
    lv_obj_center(clear_label);   

    // **Create the "Serial ON" button**
    lv_obj_t *serial_btn = lv_btn_create(tab1);
    lv_obj_set_size(serial_btn, 100, 50);
    lv_obj_align_to(serial_btn, clear_btn, LV_ALIGN_OUT_LEFT_MID, -10, 0); // Place to the left of the "Clear" button
    lv_obj_add_event_cb(serial_btn, serial_button_event_cb, LV_EVENT_CLICKED, scrollable_area);

    lv_obj_t *serial_label = lv_label_create(serial_btn);
    lv_label_set_text(serial_label, "Serial ON");
    lv_obj_center(serial_label);                      

    // Create the ESD toggle switch
    lv_obj_t *sw = lv_switch_create(tab1); // Create a switch
    lv_obj_set_size(sw, 60, 30); // Set switch size
    lv_obj_align_to(sw, scrollable_area, LV_ALIGN_OUT_TOP_RIGHT, 0, -10); // Position near the scrollable area
    lv_obj_add_event_cb(sw, esd_switch_event_cb, LV_EVENT_VALUE_CHANGED, NULL); // Attach event callback to switch

    lv_obj_t *label = lv_label_create(sw); // Create a label on the switch
    lv_label_set_text(label, "ESD");        // Set switch label text
    lv_obj_center(label);                   // Center label on the switch

        // Create a dropdown to select the baud rate
    lv_obj_t *baud_rate_dropdown = lv_dropdown_create(tab1);
    lv_dropdown_set_options(baud_rate_dropdown, "115200\n9600"); // Options for the dropdown
    lv_obj_align_to(baud_rate_dropdown,clear_btn, LV_ALIGN_TOP_RIGHT, 155, 0); // Position at the top-right corner
    lv_obj_add_event_cb(baud_rate_dropdown, baud_rate_dropdown_event_cb, LV_EVENT_VALUE_CHANGED, NULL);


}


void SerialDataTask(void *pvParameters)
{
    while (1) {
        serial_data(); // Continuously read serial data
        vTaskDelay(pdMS_TO_TICKS(10)); // Add a small delay to avoid overloading the CPU
    }
}

/* Display flushing */
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
{

  // gfx->fillScreen(0x0000);

  gfx->draw16bitRGBBitmap(area->x1 + 1,
                          area->y1 + 1,
                          (uint16_t *)&color_p->full,
                          (area->x2 - area->x1 + 1),
                          (area->y2 - area->y1 + 1));

  lv_disp_flush_ready(disp);
}

void my_touchpad_read(lv_indev_drv_t *indev_driver, lv_indev_data_t *data)
{
  if (touch_has_signal())
  {
    if (touch_touched())
    {
      data->state = LV_INDEV_STATE_PR;

      /*Set the coordinates*/
      data->point.x = touch_last_x;
      data->point.y = touch_last_y;
    }
    else if (touch_released())
    {
      data->state = LV_INDEV_STATE_REL;
    }
  }
  else
  {
    data->state = LV_INDEV_STATE_REL;
  }
}

void setup(void){
  Serial.begin(115200,SERIAL_8N1,RX_PIN,TX_PIN);
    // Init Display
  gfx->begin(12000000);
 

  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);

  touch_init();

  gfx->fillScreen(BLACK);

  lv_init();
  disp_draw_buf = (lv_color_t *)malloc(sizeof(lv_color_t) * ((gfx->width() * 200) + 1));
  if (!disp_draw_buf)
  {
    disp_draw_buf1 = (lv_color_t *)malloc(sizeof(lv_color_t) * ((gfx->width() * 200) + 1));
    if (!disp_draw_buf)
      return;
  }
  lv_disp_draw_buf_init(&draw_buf, disp_draw_buf,disp_draw_buf1, (gfx->width() * 200) + 1);
  // /* Initialize the display */
  lv_disp_drv_init(&disp_drv);
  /* Change the following line to your display resolution */
  disp_drv.hor_res = gfx->width();
  disp_drv.ver_res = gfx->height();
  disp_drv.flush_cb = my_disp_flush;
  disp_drv.draw_buf = &draw_buf;
  lv_disp_drv_register(&disp_drv);

  static lv_indev_drv_t indev_drv;
  lv_indev_drv_init(&indev_drv);          // Initialize the input device driver
  indev_drv.type = LV_INDEV_TYPE_POINTER; // Define the input type
  indev_drv.read_cb = my_touchpad_read;   // Assign the read function
  lv_indev_drv_register(&indev_drv);      // Register the input device

  // Set the home screen background color to light gray
  lv_obj_set_style_bg_color(lv_scr_act(), lv_color_make(139, 0, 0), 0); // Light gray (RGB: 211, 211, 211)


    // Initialize GUI
    TabSwipe();
      // Create a FreeRTOS task to run TabSwipe on Core 1
    xTaskCreatePinnedToCore(
        SerialDataTask,    // Function to run in the task
        "SerialDataTask",  // Name of the task
        4000,            // Stack size (in bytes)
        NULL,            // Parameters to pass to the task
        1,               // Priority of the task
        &serialTaskHandle, // Task handle
        1                // Core 0
    );
}

void loop()
{
  serial_data();
  lv_timer_handler(); /* let the GUI do its work */
  delay(5);
  
}